// LEFT SCREEN WITH

#define MUSHROOM_ANIM_FRAME_DURATION 200

uint32_t mushroom_anim_timer = 0;
uint8_t mushroom_position = 0;
uint32_t arrow_anim_timer = 0;
uint8_t arrow_position = 0;

static void print_status_narrow(void) {
    static const char PROGMEM mushroom[] = {
        0x00, 0x00, 0xc0, 0xc0, 0x30, 0x30, 0x0c, 0x0c, 0xcc, 0xcc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xc3, 0xc3, 0x03, 0x03, 0x0c, 0x0c, 0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 0x00, 0x00, 
        0xfc, 0xfc, 0x3f, 0x3f, 0xfc, 0xfc, 0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x03, 0x03, 0xff, 0xff, 0x3c, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3f, 0x3f, 0xfc, 0xfc, 
        0x3f, 0x3f, 0xc0, 0xc0, 0xf0, 0xf0, 0xff, 0xff, 0x3f, 0x3f, 0x3c, 0x3c, 0xfc, 0xfc, 0x3c, 0x3c, 
        0x3c, 0x3c, 0xff, 0xff, 0x3f, 0x3f, 0x3c, 0x3c, 0xf0, 0xf0, 0xf0, 0xf0, 0xfc, 0xfc, 0x3f, 0x3f, 
        0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x30, 0x30, 0xc0, 0xc0, 0xc0, 0xc0, 0xc3, 0xc3, 0xc0, 0xc0, 
        0xc0, 0xc0, 0xc3, 0xc3, 0xc0, 0xc0, 0xc0, 0xc0, 0x30, 0x30, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00
    };

    static const char PROGMEM star[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x3c, 0x3c, 0x03, 0x03, 
        0x3c, 0x3c, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x3c, 0x3c, 0xcc, 0xcc, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x03, 0x03, 0xf0, 0xf0, 0x00, 0x00, 
        0xf0, 0xf0, 0x03, 0x03, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x3c, 0x3c, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0xf3, 0xf3, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 
        0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0xf3, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0xf0, 0xf0, 0xcf, 0xcf, 0xc0, 0xc0, 0x30, 0x30, 0x30, 0x30, 0x0c, 0x0c, 0x0c, 0x0c, 0x03, 0x03, 
        0x0c, 0x0c, 0x0c, 0x0c, 0x30, 0x30, 0x30, 0x30, 0xc0, 0xc0, 0xcf, 0xcf, 0xf0, 0xf0, 0x00, 0x00
    };

    static const char PROGMEM up_arrow[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0x78, 0x38, 
        0x18, 0x08, 0x18, 0x78, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0x9f, 0x8f, 0x87, 0x83, 0x01, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x80, 0x83, 0x87, 0x8f, 0xbf, 0xff, 0xff, 0xfe, 0xf8, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 
        0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    static const char PROGMEM down_arrow[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 
        0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x1f, 0x7f, 0xff, 0xff, 0xfd, 0xf1, 0xe1, 0xc1, 0x01, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x80, 0xc1, 0xe1, 0xf1, 0xf9, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x0f, 0x0f, 0x1f, 0x1e, 0x18, 0x10, 0x18, 
        0x1c, 0x1e, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    static const char PROGMEM cog[] = {
        0x00, 0x00, 0x40, 0xe0, 0xf0, 0xf8, 0xfc, 0xf8, 0xf8, 0xf0, 0xe0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xf0, 0xf0, 0xe0, 0xf0, 0xf8, 0xf8, 0xfc, 0xf8, 0xf0, 0xe0, 0x40, 0x00, 0x00, 
        0xe0, 0xe0, 0xe0, 0xe1, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x07, 0x03, 0x83, 0xc1, 0xe1, 
        0xe1, 0xc1, 0x83, 0x03, 0x07, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xe1, 0xe0, 0xe0, 0xe0, 
        0x07, 0x07, 0x07, 0x87, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0xc1, 0x83, 0x87, 
        0x87, 0x83, 0xc1, 0xc0, 0xe0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x87, 0x07, 0x07, 0x07, 
        0x00, 0x00, 0x02, 0x07, 0x0f, 0x1f, 0x3f, 0x1f, 0x1f, 0x0f, 0x07, 0x0f, 0x0f, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0x0f, 0x0f, 0x07, 0x0f, 0x1f, 0x1f, 0x3f, 0x1f, 0x0f, 0x07, 0x02, 0x00, 0x00
    };

    static const char PROGMEM cog_rotated[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xbc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xf8, 0xf0, 0xf8, 
        0xf0, 0xfc, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xdc, 0x80, 0x00, 0x80, 0x80, 0x80, 0xc0, 0x00, 0x00, 
        0x30, 0x3e, 0x7f, 0x7f, 0xff, 0xfe, 0xff, 0xff, 0x7f, 0x0f, 0x0f, 0x03, 0x03, 0xc1, 0xc1, 0xc1, 
        0xe0, 0xe1, 0x01, 0x01, 0x07, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x1f, 0x1e, 0x1c, 
        0x38, 0x78, 0xf8, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe0, 0xe0, 0x80, 0x80, 0x87, 0x07, 
        0x83, 0x83, 0x83, 0xc0, 0xc0, 0xf0, 0xf0, 0xfe, 0xff, 0xff, 0x7f, 0xff, 0xfe, 0xfe, 0x7c, 0x0c, 
        0x00, 0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x01, 0x3b, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0x3f, 0x0f, 
        0x1f, 0x0f, 0x1f, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x3d, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    void mushroom_or_star_animation_phase(void) {
        led_t led_usb_state = host_keyboard_led_state();
        if (led_usb_state.caps_lock) {
            oled_set_cursor(0, mushroom_position);
            oled_write_raw_P(mushroom,sizeof(mushroom));
            if(mushroom_position == 1) {
                mushroom_position = 0;
            } else {
                mushroom_position = 1;
            }
        } else {
            oled_set_cursor(0, 0);
            oled_write_raw_P(star,sizeof(star));
        }
    }

    void up_arrow_animation_phase(void) {
        oled_set_cursor(0, arrow_position);
        oled_write_raw_P(up_arrow, sizeof(up_arrow));
        if(arrow_position == 1) {
            arrow_position = 0;
        } else {
            arrow_position = 1;
        }
    }

    void down_arrow_animation_phase(void) {
        oled_set_cursor(0, arrow_position);
        oled_write_raw_P(down_arrow, sizeof(down_arrow));
        if(arrow_position == 1) {
            arrow_position = 0;
        } else {
            arrow_position = 1;
        }
    }

    void cog_animation_phase(void) {
        oled_set_cursor(0, 0);
        if(arrow_position == 1) {
            oled_write_raw_P(cog, sizeof(cog));
            arrow_position = 0;
        } else {
            oled_write_raw_P(cog_rotated, sizeof(cog_rotated));
            arrow_position = 1;
        }
    }

    if(timer_elapsed32(mushroom_anim_timer) > MUSHROOM_ANIM_FRAME_DURATION) {
        mushroom_anim_timer = timer_read32();
        oled_clear();
        switch (get_highest_layer(layer_state)) {
            case _LOWER:
                down_arrow_animation_phase();
                break;
            case _RAISE:
                up_arrow_animation_phase();
                break;
            case _ADJUST:
                cog_animation_phase();
                break;
            default:
                mushroom_or_star_animation_phase();
                break;
        }
    }

    oled_set_cursor(0, 5);
    oled_write_P(PSTR("\n\n"), false);
    // Print current layer
    oled_write_ln_P(PSTR("LAYER"), false);
    switch (get_highest_layer(layer_state)) {
        case _BASE:
            oled_write_P(PSTR("Base\n"), false);
            break;
        case _LOWER:
            oled_write_P(PSTR("Lower"), false);
            break;
        case _RAISE:
            oled_write_P(PSTR("Raise"), false);
            break;
        case _ADJUST:
            oled_write_P(PSTR("Adj\n"), false);
            break;
        default:
            oled_write_ln_P(PSTR("Undef"), false);
    }
    oled_write_P(PSTR("\n\n"), false);

    led_t led_usb_state = host_keyboard_led_state();
    if (led_usb_state.caps_lock) {
        oled_write_ln_P(PSTR("CAPS\nLOCK\n"), true);
    } else {
        oled_write_ln_P(PSTR("\n\n"), false);
    }

    oled_write(keylog_str, false);
}
